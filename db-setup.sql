-- ===================================================================
-- InventoryDB Complete Setup Script
-- This script creates tables, seeds data, and sets up all stored
-- Execute this script once on a new, empty database.
-- ===================================================================

-- =============================================
-- Section 1: Table Creation
-- =============================================

-- Table: Users
IF NOT EXISTS (SELECT * FROM sysobjects WHERE name='Users' and xtype='U')
BEGIN
    CREATE TABLE Users (
        UserID INT PRIMARY KEY IDENTITY(1,1),
        Username NVARCHAR(100) NOT NULL UNIQUE,
        PasswordHash NVARCHAR(256) NOT NULL,
        Role NVARCHAR(50) NOT NULL CHECK (Role IN ('Admin', 'Supplier')),
        CreatedAt DATETIME DEFAULT GETDATE()
    );
    PRINT 'Table "Users" created successfully.';
END
GO

-- Table: Items
IF NOT EXISTS (SELECT * FROM sysobjects WHERE name='Items' and xtype='U')
BEGIN
    CREATE TABLE Items (
        ItemID INT PRIMARY KEY IDENTITY(1,1),
        Name NVARCHAR(200) NOT NULL,
        Price DECIMAL(10, 2) NOT NULL,
        Quantity INT NOT NULL,
        ImagePath NVARCHAR(500) NULL,
        SupplierID INT NOT NULL,
        CreatedAt DATETIME DEFAULT GETDATE(),
        is_deleted BIT NOT NULL DEFAULT 0, -- Soft-delete flag
        CONSTRAINT FK_Items_Supplier FOREIGN KEY (SupplierID) REFERENCES Users(UserID) ON DELETE CASCADE
    );
    -- Index for faster retrieval of items by supplier
    CREATE INDEX IX_Items_SupplierID ON Items(SupplierID);
    -- Index for efficiently filtering out soft-deleted items
    CREATE INDEX IX_Items_is_deleted ON Items(is_deleted) WHERE is_deleted = 0;
    PRINT 'Table "Items" created successfully with soft-delete column.';
END
GO

-- =============================================
-- Section 2: Seed Initial Data
-- =============================================
IF NOT EXISTS (SELECT 1 FROM Users WHERE Username = 'testsupplier')
BEGIN
    -- Password: 'Supplier@123', BCrypt hash generated by the backend
    INSERT INTO Users (Username, PasswordHash, Role)
    VALUES ('testsupplier', '$2a$11$eU1p.z0O8.p4G8g3nJ87rO2GqVwTj1rR9mE8.iP6bO4B9uH8xK6mS', 'Supplier');
    PRINT 'Seeded "testsupplier" user.';
END
GO

-- =============================================
-- Section 3: Stored Procedures
-- =============================================

-- Procedure to Register a User
CREATE OR ALTER PROCEDURE sp_RegisterUser
    @Username NVARCHAR(100),
    @PasswordHash NVARCHAR(256)
AS
BEGIN
    IF NOT EXISTS (SELECT 1 FROM Users WHERE Username = @Username)
    BEGIN
        INSERT INTO Users (Username, PasswordHash, Role)
        VALUES (@Username, @PasswordHash, 'Supplier');
        SELECT UserID, Username, Role FROM Users WHERE UserID = SCOPE_IDENTITY();
    END
    ELSE
    BEGIN
        SELECT -1 AS UserID, '' AS Username, '' AS Role; -- Indicates username exists
    END
END
GO

-- Procedure to create an Admin user
CREATE OR ALTER PROCEDURE sp_CreateAdmin
    @Username NVARCHAR(100),
    @PasswordHash NVARCHAR(256)
AS
BEGIN
     IF NOT EXISTS (SELECT 1 FROM Users WHERE Username = @Username)
    BEGIN
        INSERT INTO Users (Username, PasswordHash, Role)
        VALUES (@Username, @PasswordHash, 'Admin');
        SELECT UserID, Username, Role FROM Users WHERE UserID = SCOPE_IDENTITY();
    END
    ELSE
    BEGIN
        UPDATE Users SET Role = 'Admin' WHERE Username = @Username AND Role != 'Admin';
        SELECT UserID, Username, Role FROM Users WHERE Username = @Username;
    END
END
GO

-- Procedure to Get User by Username
CREATE OR ALTER PROCEDURE sp_GetUserByUsername
    @Username NVARCHAR(100)
AS
BEGIN
    SELECT UserID, Username, PasswordHash, Role FROM Users WHERE Username = @Username;
END
GO

-- Procedure to Get All Suppliers
CREATE OR ALTER PROCEDURE sp_GetAllSuppliers
AS
BEGIN
    SELECT UserID, Username FROM Users WHERE Role = 'Supplier' ORDER BY Username;
END
GO

-- Procedure to Create an Item
CREATE OR ALTER PROCEDURE sp_CreateItem
    @Name NVARCHAR(200),
    @Price DECIMAL(10, 2),
    @Quantity INT,
    @ImagePath NVARCHAR(500),
    @SupplierID INT
AS
BEGIN
    INSERT INTO Items (Name, Price, Quantity, ImagePath, SupplierID)
    VALUES (@Name, @Price, @Quantity, @ImagePath, @SupplierID);
    SELECT SCOPE_IDENTITY() AS ItemID;
END
GO

-- Procedure to Get All Items (Paginated) - EXCLUDES soft-deleted items
CREATE OR ALTER PROCEDURE sp_GetAllItems
    @PageNumber INT,
    @PageSize INT,
    @SearchTerm NVARCHAR(200) = NULL,
    @SearchField NVARCHAR(50) = 'ItemName'
AS
BEGIN
    DECLARE @Offset INT = (@PageNumber - 1) * @PageSize;

    SELECT
        i.ItemID, i.Name, i.Price, i.Quantity, i.ImagePath, i.SupplierID,
        u.Username AS SupplierName,
        (SELECT COUNT(*) FROM Items i2
         LEFT JOIN Users u2 ON i2.SupplierID = u2.UserID
         WHERE i2.is_deleted = 0 AND -- Exclude deleted items from total count
               (@SearchTerm IS NULL OR
               (@SearchField = 'ItemName' AND i2.Name LIKE '%' + @SearchTerm + '%') OR
               (@SearchField = 'SupplierName' AND u2.Username LIKE '%' + @SearchTerm + '%'))) AS TotalCount
    FROM Items i
    JOIN Users u ON i.SupplierID = u.UserID
    WHERE i.is_deleted = 0 AND -- Exclude deleted items from results
          (@SearchTerm IS NULL OR
          (@SearchField = 'ItemName' AND i.Name LIKE '%' + @SearchTerm + '%') OR
          (@SearchField = 'SupplierName' AND u.Username LIKE '%' + @SearchTerm + '%'))
    ORDER BY i.CreatedAt DESC
    OFFSET @Offset ROWS
    FETCH NEXT @PageSize ROWS ONLY;
END
GO

-- Procedure to Get Item by ID - EXCLUDES soft-deleted items
CREATE OR ALTER PROCEDURE sp_GetItemByID
    @ItemID INT
AS
BEGIN
    SELECT
        i.ItemID, i.Name, i.Price, i.Quantity, i.ImagePath, i.SupplierID,
        u.Username AS SupplierName
    FROM Items i
    JOIN Users u ON i.SupplierID = u.UserID
    WHERE i.ItemID = @ItemID AND i.is_deleted = 0; -- Ensure item is not deleted
END
GO

-- Procedure to Update an Item
CREATE OR ALTER PROCEDURE sp_UpdateItem
    @ItemID INT,
    @Name NVARCHAR(200),
    @Price DECIMAL(10, 2),
    @Quantity INT,
    @ImagePath NVARCHAR(500),
    @SupplierID INT
AS
BEGIN
    UPDATE Items
    SET Name = @Name, Price = @Price, Quantity = @Quantity, ImagePath = @ImagePath, SupplierID = @SupplierID
    WHERE ItemID = @ItemID;
END
GO

-- Procedure to SOFT-DELETE an Item
CREATE OR ALTER PROCEDURE sp_DeleteItem
    @ItemID INT
AS
BEGIN
    UPDATE Items
    SET is_deleted = 1
    WHERE ItemID = @ItemID;
END
GO

-- Procedure to Get Items by Supplier (Paginated) - EXCLUDES soft-deleted items
CREATE OR ALTER PROCEDURE sp_GetItemsBySupplierID
    @SupplierID INT,
    @PageNumber INT,
    @PageSize INT,
    @SearchTerm NVARCHAR(200) = NULL
AS
BEGIN
    DECLARE @Offset INT = (@PageNumber - 1) * @PageSize;

    SELECT
        i.ItemID, i.Name, i.Price, i.Quantity, i.ImagePath,
        (SELECT COUNT(*) FROM Items i2 WHERE i2.SupplierID = @SupplierID AND i2.is_deleted = 0 AND (@SearchTerm IS NULL OR i2.Name LIKE '%' + @SearchTerm + '%')) AS TotalCount
    FROM Items i
    WHERE i.SupplierID = @SupplierID
      AND i.is_deleted = 0 -- Exclude deleted items
      AND (@SearchTerm IS NULL OR i.Name LIKE '%' + @SearchTerm + '%')
    ORDER BY i.CreatedAt DESC
    OFFSET @Offset ROWS
    FETCH NEXT @PageSize ROWS ONLY;
END
GO

-- Procedure for Supplier to Update Item's Price and Quantity - CHECKS soft-delete status
CREATE OR ALTER PROCEDURE sp_UpdateItemPriceAndQuantity
    @ItemID INT,
    @SupplierID INT,
    @Price DECIMAL(10, 2),
    @Quantity INT
AS
BEGIN
    UPDATE Items
    SET Price = @Price, Quantity = @Quantity
    WHERE ItemID = @ItemID 
      AND SupplierID = @SupplierID
      AND is_deleted = 0; -- Only update if not deleted

    SELECT @@ROWCOUNT;
END
GO

-- Procedure: Get Top 5 Items with Least Stock - EXCLUDES soft-deleted items
CREATE OR ALTER PROCEDURE sp_GetTopLeastStockItems
AS
BEGIN
    SELECT TOP 5 Name, Quantity
    FROM Items
    WHERE is_deleted = 0 -- Exclude deleted items
    ORDER BY Quantity ASC;
END
GO

-- Procedure: Get Top 5 Suppliers with Least Combined Stock - EXCLUDES soft-deleted items
CREATE OR ALTER PROCEDURE sp_GetTopLeastSupplierStock
AS
BEGIN
    SELECT TOP 5
        u.Username,
        SUM(i.Quantity) AS TotalQuantity
    FROM Items i
    JOIN Users u ON i.SupplierID = u.UserID
    WHERE u.Role = 'Supplier' AND i.is_deleted = 0 -- Exclude deleted items
    GROUP BY u.UserID, u.Username
    ORDER BY TotalQuantity ASC;
END
GO

PRINT 'All stored procedures created/updated successfully.';